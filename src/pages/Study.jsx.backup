import { useState, useEffect } from 'react'
import { useFlashcardsLocal } from '../hooks/useFlashcardsLocal'
import FlashcardViewer from '../components/flashcards/FlashcardViewer'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card'
import { Button } from '../components/ui/button'
import { Badge } from '../components/ui/badge'
import { Progress } from '../components/ui/progress'
import { 
  GraduationCap, 
  BookOpen, 
  Clock, 
  Target, 
  TrendingUp,
  Play,
  RotateCcw,
  CheckCircle,
  ArrowLeft
} from 'lucide-react'

export const Study = () => {
  const { flashcards, getStats } = useFlashcardsLocal()
  const [studyMode, setStudyMode] = useState(null)
  const [currentFlashcardIndex, setCurrentFlashcardIndex] = useState(0)
  const [showAnswer, setShowAnswer] = useState(false)
  const [studyFlashcards, setStudyFlashcards] = useState([])
  const [sessionStats, setSessionStats] = useState({
    correct: 0,
    incorrect: 0,
    total: 0
  })

  const stats = getStats()

  // Estat√≠sticas do dia (usando dados reais)
  const studyStats = {
    todayGoal: 20,
    completed: Math.min(stats.total, 20),
    streak: 5,
    accuracy: stats.total > 0 ? Math.round((sessionStats.correct / Math.max(sessionStats.total, 1)) * 100) : 87
  }

  // Modos de estudo baseados nos dados reais
  const studyModes = [
    {
      id: 'review',
      title: 'Revis√£o R√°pida',
      description: 'Revise flashcards que voc√™ j√° estudou',
      icon: RotateCcw,
      color: 'bg-blue-500',
      count: flashcards.length,
      estimatedTime: `${Math.max(Math.ceil(flashcards.length * 1.5), 5)}-${Math.ceil(flashcards.length * 2)} min`
    },
    {
      id: 'new',
      title: 'Novos Flashcards',
      description: 'Estude flashcards que voc√™ ainda n√£o viu',
      icon: BookOpen,
      color: 'bg-green-500',
      count: flashcards.filter(card => !card.studied).length || flashcards.length,
      estimatedTime: `${Math.max(Math.ceil(flashcards.length * 2), 10)}-${Math.ceil(flashcards.length * 3)} min`
    },
    {
      id: 'difficult',
      title: 'Flashcards Dif√≠ceis',
      description: 'Foque nos flashcards que voc√™ tem mais dificuldade',
      icon: Target,
      color: 'bg-orange-500',
      count: flashcards.filter(card => card.difficulty === 'Dif√≠cil' || card.difficulty === 'Muito Dif√≠cil').length,
      estimatedTime: `${Math.max(Math.ceil(flashcards.length * 1.5), 5)}-${Math.ceil(flashcards.length * 2.5)} min`
    },
    {
      id: 'favorites',
      title: 'Favoritos',
      description: 'Estude seus flashcards favoritos',
      icon: CheckCircle,
      color: 'bg-purple-500',
      count: flashcards.filter(card => card.is_public).length,
      estimatedTime: `${Math.max(Math.ceil(flashcards.length * 1.5), 5)}-${Math.ceil(flashcards.length * 2)} min`
    }
  ]

  // Sess√µes recentes (simuladas baseadas nos dados reais)
  const recentSessions = flashcards.slice(0, 3).map((card, index) => ({
    subject: getDisciplineName(card.discipline_id),
    score: 85 + Math.floor(Math.random() * 15),
    time: `${10 + Math.floor(Math.random() * 10)} min`,
    date: index === 0 ? 'Hoje' : index === 1 ? 'Ontem' : '2 dias atr√°s'
  }))

  function getDisciplineName(disciplineId) {
    const disciplinas = {
      '1': 'Cardiologia',
      '2': 'Pneumologia', 
      '3': 'Neurologia',
      '4': 'Gastroenterologia',
      '5': 'Endocrinologia',
      '6': 'Infectologia',
      '7': 'Nefrologia',
      '8': 'Hematologia',
      '9': 'Reumatologia',
      '10': 'Dermatologia',
      '11': 'Psiquiatria',
      '12': 'Oftalmologia',
      '13': 'Otorrinolaringologia',
      '14': 'Urologia',
      '15': 'Ginecologia'
    }
    return disciplinas[disciplineId] || 'Medicina Geral'
  }

  const startStudyMode = (modeId) => {
    let selectedFlashcards = []
    
    switch (modeId) {
      case 'review':
        selectedFlashcards = [...flashcards]
        break
      case 'new':
        selectedFlashcards = flashcards.filter(card => !card.studied) 
        if (selectedFlashcards.length === 0) selectedFlashcards = [...flashcards]
        break
      case 'difficult':
        selectedFlashcards = flashcards.filter(card => 
          card.difficulty === 'Dif√≠cil' || card.difficulty === 'Muito Dif√≠cil'
        )
        if (selectedFlashcards.length === 0) selectedFlashcards = [...flashcards]
        break
      case 'favorites':
        selectedFlashcards = flashcards.filter(card => card.is_public)
        if (selectedFlashcards.length === 0) selectedFlashcards = [...flashcards]
        break
      default:
        selectedFlashcards = [...flashcards]
    }

    // Embaralhar flashcards
    selectedFlashcards = selectedFlashcards.sort(() => Math.random() - 0.5)
    
    setStudyFlashcards(selectedFlashcards)
    setStudyMode(modeId)
    setCurrentFlashcardIndex(0)
    setShowAnswer(false)
    setSessionStats({ correct: 0, incorrect: 0, total: 0 })
  }

  const nextFlashcard = () => {
    if (currentFlashcardIndex < studyFlashcards.length - 1) {
      setCurrentFlashcardIndex(currentFlashcardIndex + 1)
      setShowAnswer(false)
    } else {
      // Fim da sess√£o
      alert(`Sess√£o conclu√≠da! Voc√™ estudou ${studyFlashcards.length} flashcards.`)
      setStudyMode(null)
    }
  }

  const previousFlashcard = () => {
    if (currentFlashcardIndex > 0) {
      setCurrentFlashcardIndex(currentFlashcardIndex - 1)
      setShowAnswer(false)
    }
  }

  const markAnswer = (isCorrect) => {
    setSessionStats(prev => ({
      ...prev,
      correct: prev.correct + (isCorrect ? 1 : 0),
      incorrect: prev.incorrect + (isCorrect ? 0 : 1),
      total: prev.total + 1
    }))
    
    // Auto avan√ßar ap√≥s marcar resposta
    setTimeout(() => {
      nextFlashcard()
    }, 1000)
  }

  const currentFlashcard = studyFlashcards[currentFlashcardIndex]

  // Se est√° em modo de estudo, mostrar interface de estudo
  if (studyMode && studyFlashcards.length > 0) {
    return (
      <div className="max-w-6xl mx-auto space-y-6">
        {/* Header da sess√£o */}
        <div className="flex items-center justify-between">
          <Button 
            variant="outline" 
            onClick={() => setStudyMode(null)}
            className="flex items-center gap-2"
          >
            <ArrowLeft className="h-4 w-4" />
            Voltar
          </Button>
          
          <div className="text-center">
            <h2 className="text-xl font-semibold">
              {studyModes.find(mode => mode.id === studyMode)?.title}
            </h2>
            <p className="text-sm text-muted-foreground">
              {currentFlashcardIndex + 1} de {studyFlashcards.length}
            </p>
          </div>

          <div className="text-right">
            <p className="text-sm text-muted-foreground">Acertos: {sessionStats.correct} | Erros: {sessionStats.incorrect}</p>
            <p className="font-semibold">
              {Math.round(((currentFlashcardIndex + 1) / studyFlashcards.length) * 100)}% conclu√≠do
            </p>
          </div>
        </div>

        {/* Barra de progresso */}
        <Progress 
          value={((currentFlashcardIndex + 1) / studyFlashcards.length) * 100} 
          className="h-3"
        />

        {/* Flashcard Viewer */}
        <FlashcardViewer
          flashcard={currentFlashcard}
          onNext={currentFlashcardIndex < studyFlashcards.length - 1 ? nextFlashcard : null}
          onPrevious={currentFlashcardIndex > 0 ? previousFlashcard : null}
          onMarkAnswer={markAnswer}
          showNavigation={true}
        />
      </div>
    )
  }

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold flex items-center gap-3">
            <GraduationCap className="h-8 w-8 text-blue-600" />
            Estudar
          </h1>
          <p className="text-muted-foreground mt-1">
            Continue sua prepara√ß√£o para a valida√ß√£o m√©dica
          </p>
        </div>
      </div>

      {/* Estat√≠sticas do dia */}
      <div className="grid gap-6 md:grid-cols-4">
        <Card className="bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950 dark:to-blue-900 border-blue-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Meta Di√°ria</CardTitle>
            <Target className="h-4 w-4 text-blue-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-700">
              {studyStats.completed}/{studyStats.todayGoal}
            </div>
            <Progress 
              value={(studyStats.completed / studyStats.todayGoal) * 100} 
              className="mt-2" 
            />
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950 dark:to-green-900 border-green-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Sequ√™ncia</CardTitle>
            <TrendingUp className="h-4 w-4 text-green-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-700">
              {studyStats.streak} dias
            </div>
            <p className="text-xs text-green-600">
              Continue assim! üî•
            </p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-950 dark:to-purple-900 border-purple-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Precis√£o</CardTitle>
            <CheckCircle className="h-4 w-4 text-purple-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-purple-700">
              {studyStats.accuracy}%
            </div>
            <p className="text-xs text-purple-600">
              √öltima semana
            </p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-950 dark:to-orange-900 border-orange-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Tempo Hoje</CardTitle>
            <Clock className="h-4 w-4 text-orange-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-700">
              45 min
            </div>
            <p className="text-xs text-orange-600">
              Meta: 60 min
            </p>
          </CardContent>
        </Card>
      </div>

      <div className="grid gap-8 lg:grid-cols-3">
        {/* Modos de estudo */}
        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle>Escolha seu modo de estudo</CardTitle>
              <CardDescription>
                Selecione como voc√™ quer estudar hoje
              </CardDescription>
            </CardHeader>
            <CardContent className="grid gap-4 md:grid-cols-2">
              {studyModes.map((mode) => (
                <Card 
                  key={mode.id} 
                  className="cursor-pointer hover:shadow-lg transition-all duration-300 group"
                  onClick={() => setStudyMode(mode.id)}
                >
                  <CardContent className="p-6">
                    <div className="flex items-center gap-4 mb-4">
                      <div className={`w-12 h-12 rounded-lg ${mode.color} flex items-center justify-center`}>
                        <mode.icon className="h-6 w-6 text-white" />
                      </div>
                      <div className="flex-1">
                        <h3 className="font-semibold">{mode.title}</h3>
                        <p className="text-sm text-muted-foreground">
                          {mode.description}
                        </p>
                      </div>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-4 text-sm text-muted-foreground">
                        <span>{mode.count} flashcards</span>
                        <span>‚Ä¢</span>
                        <span>{mode.estimatedTime}</span>
                      </div>
                      
                      <Button 
                        size="sm" 
                        className="opacity-0 group-hover:opacity-100 transition-opacity"
                        onClick={() => startStudyMode(mode.id)}
                      >
                        <Play className="h-4 w-4 mr-1" />
                        Iniciar
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </CardContent>
          </Card>
        </div>

        {/* Sess√µes recentes */}
        <div>
          <Card>
            <CardHeader>
              <CardTitle>Sess√µes Recentes</CardTitle>
              <CardDescription>
                Seu hist√≥rico de estudos
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {recentSessions.map((session, index) => (
                <div 
                  key={index}
                  className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg"
                >
                  <div>
                    <p className="font-medium">{session.subject}</p>
                    <p className="text-sm text-muted-foreground">
                      {session.time} ‚Ä¢ {session.date}
                    </p>
                  </div>
                  <Badge 
                    variant="secondary"
                    className={
                      session.score >= 90 ? 'bg-green-100 text-green-800' :
                      session.score >= 80 ? 'bg-blue-100 text-blue-800' :
                      'bg-orange-100 text-orange-800'
                    }
                  >
                    {session.score}%
                  </Badge>
                </div>
              ))}
              
              <Button variant="outline" className="w-full">
                Ver Hist√≥rico Completo
              </Button>
            </CardContent>
          </Card>

          {/* Dicas de estudo */}
          <Card className="mt-6">
            <CardHeader>
              <CardTitle>üí° Dica do Dia</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                Estudar por 25 minutos seguidos de uma pausa de 5 minutos 
                (t√©cnica Pomodoro) pode melhorar sua concentra√ß√£o e reten√ß√£o.
              </p>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Call to action se n√£o h√° flashcards */}
      {flashcards.length === 0 ? (
        <Card className="text-center py-12">
          <CardContent>
            <GraduationCap className="h-16 w-16 mx-auto text-muted-foreground mb-4" />
            <h3 className="text-xl font-semibold mb-2">
              Nenhum flashcard encontrado
            </h3>
            <p className="text-muted-foreground mb-6">
              Voc√™ precisa criar alguns flashcards antes de come√ßar a estudar.
            </p>
            <div className="flex justify-center gap-4">
              <Button onClick={() => window.location.href = '/flashcards'}>
                <BookOpen className="mr-2 h-4 w-4" />
                Criar Flashcards
              </Button>
            </div>
          </CardContent>
        </Card>
      ) : (
        <Card className="text-center py-12">
          <CardContent>
            <GraduationCap className="h-16 w-16 mx-auto text-muted-foreground mb-4" />
            <h3 className="text-xl font-semibold mb-2">
              Pronto para come√ßar?
            </h3>
            <p className="text-muted-foreground mb-6">
              Escolha um modo de estudo acima e comece sua sess√£o de prepara√ß√£o
            </p>
            <div className="flex justify-center gap-4">
              <Button onClick={() => startStudyMode('review')}>
                <Play className="mr-2 h-4 w-4" />
                Iniciar Estudo R√°pido
              </Button>
              <Button variant="outline" onClick={() => alert('Funcionalidade em desenvolvimento')}>
                Configurar Meta Di√°ria
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}

